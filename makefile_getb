# make OUT_O_DIR=debug CC=clang CFLAGS="-g -O0" -f makefile.v3.mak
# make -f makefile.v3.mak
# make OUT_O_DIR=debug -f makefile.v3.mak
# make OUT_O_DIR=debug -f makefile.v3.mak clean
# make -f makefile.v3.mak clean

ifeq ($(origin CXX),default)
  CXX = g++-12
endif


ifeq ($(OPTIMIZATION), none)
  CXXFLAGS ?= -std=c++20 -O0 -g -Wall -Wextra -Wpedantic -DBOOST_ALLOW_DEPRECATED_HEADERS \
              -fsanitize=leak,undefined,address
  OUT_O_DIR ?= build_debug
  LDFLAGS ?= -lboost_program_options -fsanitize=leak,undefined,address -lgmp
else ifeq ($(OPTIMIZATION), debug)
  CXXFLAGS ?= -std=c++20 -O0 -g -Wall -Wextra -Wpedantic -DBOOST_ALLOW_DEPRECATED_HEADERS \
              -fsanitize=leak,undefined,address
  OUT_O_DIR ?= build_debug
  LDFLAGS ?= -lboost_program_options -fsanitize=leak,undefined,address -lgmp
else ifeq ($(OPTIMIZATION), release)
  CXXFLAGS ?= -std=c++20 -O3 -DNDEBUG -Wall -Wextra -Wpedantic -DBOOST_ALLOW_DEPRECATED_HEADERS
  OUT_O_DIR ?= build_release
  LDFLAGS ?= -lboost_program_options -lgmp
endif

SOURCES = get_contour.cpp $(wildcard source/*.cpp)
OBJECTS = $(addprefix $(OUT_O_DIR)/,$(SOURCES:.cpp=.o))
DEPS = $(OBJECTS:.o=.d)

.PHONY: all
all: get

get: $(OBJECTS)
	$(CXX) $^ -o $@ $(LDFLAGS)

# static pattern rule to not redefine generic one
$(OBJECTS) : $(OUT_O_DIR)/%.o : %.cpp
	@mkdir -p $(@D)
	$(CXX) $(CXXFLAGS) -c $< -o $@

$(DEPS) : $(OUT_O_DIR)/%.d : %.cpp
	@mkdir -p $(@D)
	$(CXX) -E $(CXXFLAGS) $< -MM -MT $(@:.d=.o) > $@



.PHONY: clean
clean:
	rm -rf $(OBJECTS) $(DEPS) 

NODEPS = clean
ifeq (0, $(words $(findstring $(MAKECMDGOALS), $(NODEPS))))
include $(DEPS)
endif
